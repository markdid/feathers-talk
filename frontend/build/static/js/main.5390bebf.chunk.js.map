{"version":3,"sources":["feathers.js","components/login.js","components/chat.js","App.js","serviceWorker.js","index.js"],"names":["socket","io","client","feathers","configure","socketio","authentication","storage","window","localStorage","Login","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","event","setState","defineProperty","target","name","value","_this2","_this$state","email","password","console","log","authenticate","strategy","catch","error","_this3","react_default","a","createElement","message","type","placeholder","onChange","updateField","id","onClick","handleLogin","Component","Chat","input","querySelector","text","trim","service","create","then","preventDefault","_this$props","users","messages","className","map","user","key","_id","href","logout","ref","main","chat","moment","createdAt","format","onSubmit","sendMessage","bind","App","login","len","live","on","Promise","all","find","query","$sort","$limit","_ref","_ref2","slicedToArray","messagePage","userPage","data","reverse","liveUsers","concat","undefined","components_login","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5390bebf.chunk.js","sourcesContent":["import io from 'socket.io-client';\r\nimport feathers from '@feathersjs/client';\r\n\r\nconst socket = io('http://localhost:3030');\r\nconst client = feathers();\r\n\r\nclient.configure(feathers.socketio(socket));\r\nclient.configure(feathers.authentication({\r\n    storage: window.localStorage\r\n}));\r\n\r\nexport default client;","import React, {Component} from 'react';\r\nimport client from '../feathers';\r\n\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    updateField(event) {\r\n        this.setState({ [event.target.name]: event.target.value })\r\n    }\r\n\r\n    handleLogin(){\r\n        const {email, password} = this.state;\r\n        console.log(\"processing\");\r\n        return client.authenticate({\r\n            strategy: 'local',\r\n            email, password\r\n        }).catch(error => this.setState({ error }));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <p>{this.state.error && this.state.error.message}</p>\r\n                <form>\r\n                    <input type=\"email\" name=\"email\" placeholder=\"email\" onChange={event => this.updateField(event)}></input>\r\n                    <input type=\"password\" name=\"password\" placeholder=\"password\" onChange={event => this.updateField(event)}></input>\r\n                    <button type=\"button\" id=\"login\" onClick={() => this.handleLogin()}>Log in</button>\r\n                </form>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Login;","import React, {Component} from 'react';\r\nimport moment from 'moment';\r\nimport client from '../feathers';\r\n\r\nclass Chat extends Component {\r\n\r\n    sendMessage(event) {\r\n        const input = event.target.querySelector('[name=\"text\"]');\r\n        const text = input.value.trim();\r\n\r\n        if(text) {\r\n            client.service('messages').create({ text }).then(() => {\r\n                input.value = '';\r\n            });\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    // componentDidMount() {\r\n    //     client.service('meessages').on('created');\r\n    //     // this.scrollToBottom();\r\n    // }\r\n    //\r\n    // componentWillUnmount() {\r\n    //     client.service('messages').removeListener('created');\r\n    // }\r\n\r\n    render() {\r\n        const { users, messages } = this.props;\r\n\r\n        return (\r\n            <div className=\"flex flex-column\">\r\n                <header className=\"title-bar flex flex-row flex-center\">\r\n                    <div className=\"title-wrapper block center-element\">\r\n                        {/*<span className=\"title\">{user.context}</span>*/}\r\n                        <span className=\"title\">Chat</span>\r\n                    </div>\r\n                </header>\r\n\r\n                {/*sidebar*/}\r\n                <div className=\"flex flex-row flex-1 clear\">\r\n                    <div className=\"sidebar col col-3 flex flex-column flex-space-between\">\r\n                    {/*<span className=\"absolute username\">{users.length()}</span>*/}\r\n                        <ul className=\"flex flex-column flex-1 list-unstyled user-list\">\r\n                            {users.map(user => <li key={user._id}>\r\n                                <a className=\"block relative\" href=\"#\">\r\n                                    {/*<img src={user.avatar} alt={user.email} className=\"avatar\" />*/}\r\n                                    {user.email}\r\n                                </a>\r\n                            </li>)}\r\n                        </ul>\r\n                        <footer className=\"flex flex-row flex-center\">\r\n                            <a href=\"#logout\" onClick={() => client.logout()}>\r\n                                Sign Out\r\n                            </a>\r\n                        </footer>\r\n\r\n                    </div>\r\n                </div>\r\n\r\n            {/*    main section*/}\r\n                <div className=\"flex flex-column col col-9\">\r\n                    <div className=\"chat flex flex-column flex-1 clear\" ref={main => { this.chat = main; }}>\r\n                    {messages.map(message =>\r\n                        <div className=\"message flex flex-row\" key={message._id}>\r\n                            <p className=\"message-header\">\r\n                                <span className=\"username font-600\">{message.user.email}</span>\r\n                                <span className=\"sent-date font-300\">{moment(message.createdAt).format('MMM Do, hh:mm:ss')}</span>\r\n                            </p>\r\n                            <p className=\"message-content font-300\">{message.text}</p>\r\n                        </div>\r\n                    )}\r\n                    </div>\r\n\r\n                    <form onSubmit={this.sendMessage.bind(this)} className=\"flex flex-row flex-space-between\" id=\"send-message\">\r\n                        <input type=\"text\" name=\"text\" className=\"flex flex-1\" />\r\n                        <button className=\"button-primary\" type=\"submit\">Send</button>\r\n                    </form>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Chat;","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport Login from './components/login';\nimport Chat from './components/chat';\nimport client from './feathers';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        login: null,\n        len: 0\n    };\n  }\n\n  componentDidMount() {\n      const messages = client.service('messages');\n      const users = client.service('users');\n      const live = client.service('sockets');\n\n      client.authenticate().catch(() => this.setState({ login: null }));\n\n      //logged in\n      client.on('authenticated', login => {\n          Promise.all([\n              messages.find({\n                  query: {\n                      $sort: {createdAt: -1},\n                      $limit: 25\n                  }\n              }),\n              users.find(),\n              live.find()\n          ]).then( ([ messagePage, userPage, live]) => {\n\n              const messages = messagePage.data.reverse();\n              const users = userPage.data;\n              const liveUsers = live;\n              console.log(liveUsers);\n              this.setState({ login, messages, users, len: this.state.len += 10 })\n          });\n      });\n\n      //logout\n      client.on('logout', () => this.setState({\n          login: null,\n          messages: null,\n          users: null\n      }));\n\n\n      messages.on('created', message => this.setState({\n          messages: this.state.messages.concat(message)\n      }));\n\n      users.on('created', user => this.setState({\n          users: this.state.users.concat(user)\n      }));\n  }\n\n\n    render() {\n      if(this.state.login === undefined) {\n          return <div>\n              <h1>loading...?</h1>\n          </div>\n      } else if(this.state.login) {\n          return <Chat messages={this.state.messages} users={this.state.users}/>\n      }\n    return (\n        <div>\n          <Login />\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}